package org.jenkinsci.plugins.cloverphp.results;

import hudson.model.AbstractBuild;

/**
 * Created by Patrick Br√ºckner on 24.08.15.
 */
public class PackageCoverage extends ProjectCoverage {

    @Override
    public boolean addFileCoverage(FileCoverage result) {
        return super.addFileCoverage(result);
    }

    /**
     * for some reason, the clover results generated by recent PHPUnit do not contain metrics on package level.
     * if we encounter this, we'll just quickly add up the file metrics in that package
     * @return int
     */
    @Override
    public int getLoc() {
        if(super.getLoc()==0) {
            int loc = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                loc += f.getLoc();
            }
            super.setLoc(loc);
        }
        return super.getLoc();
    }

    @Override
    public int getNcloc() {
        if(super.getNcloc()==0) {
            int ncloc = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                ncloc += f.getNcloc();
            }
            super.setNcloc(ncloc);
        }
        return super.getNcloc();
    }

    @Override
    public int getMethods() {
        if(super.getMethods()==0) {
            int methods = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                methods += f.getMethods();
            }
            super.setMethods(methods);
        }
        return super.getMethods();
    }

    @Override
    public int getCoveredstatements() {
        if(super.getCoveredstatements()==0) {
            int coveredstatements = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                coveredstatements += f.getCoveredstatements();
            }
            super.setCoveredstatements(coveredstatements);
        }
        return super.getCoveredstatements();
    }

    @Override
    public int getCoveredmethods() {
        if(super.getCoveredmethods()==0) {
            int coveredmethods = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                coveredmethods += f.getCoveredmethods();
            }
            super.setCoveredmethods(coveredmethods);
        }
        return super.getCoveredmethods();
    }

    @Override
    public int getStatements() {
        if(super.getStatements()==0) {
            int statements = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                statements += f.getStatements();
            }
            super.setStatements(statements);
        }
        return super.getStatements();
    }

    @Override
    public int getCoveredelements() {
        if(super.getCoveredelements()==0) {
            int coveredelements = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                coveredelements += f.getCoveredelements();
            }
            super.setCoveredelements(coveredelements);
        }
        return super.getCoveredelements();
    }

    @Override
    public int getElements() {
        if(super.getElements()==0) {
            int elements = 0;
            for(FileCoverage f : this.getFileCoverages()) {
                elements += f.getElements();
            }
            super.setElements(elements);
        }
        return super.getElements();
    }

    public void setOwner(AbstractBuild owner) {
        super.setOwner(owner);
        for (FileCoverage p : this.getFileCoverages()) {
            p.setOwner(owner);
        }
    }

    @Override
    public AbstractClassMetrics getPreviousResult() {

        ProjectCoverage parentPreviousResult = (ProjectCoverage) getParent().getPreviousResult();
        if (parentPreviousResult == null) {
            return null;
        }
        return parentPreviousResult.findPackageCoverage(getURLSafeName());
    }
}
